{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carod\\\\Documents\\\\React\\\\weatherapplication\\\\weatherapplication\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\n\nfunction App() {\n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n      const responseData = await response.json();\n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchProducts();\n  }, []);\n\n  const addCoordenateHandler = async (latitude, longitud) => {\n    try {\n      const newCoordenate = {\n        latitude: +latitude,\n        longitude: +longitud // \"+\" to convert string to number\n\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({ ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewProduct, {\n    onAddCoordenate: addCoordenateHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && /*#__PURE__*/React.createElement(ProductList, {\n    items: loadedCoordenates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 24\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/carod/Documents/React/weatherapplication/weatherapplication/frontend/src/App.js"],"names":["React","useState","useEffect","Header","NewProduct","ProductList","App","loadedCoordenates","setLoadedCoordenates","isLoading","setIsLoading","fetchProducts","response","fetch","responseData","json","coordenates","addCoordenateHandler","latitude","longitud","newCoordenate","longitude","hasError","method","body","JSON","stringify","headers","ok","Error","message","prevCoordenates","concat","id","coordenate","error","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;;AAGA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,aAAa,GAAG,YAAY;AAChCD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAA5B;AAEA,YAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AAEAP,MAAAA,oBAAoB,CAACM,YAAY,CAACE,WAAd,CAApB;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARD;;AAUAC,IAAAA,aAAa;AACd,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMM,oBAAoB,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACzD,QAAI;AACF,YAAMC,aAAa,GAAG;AACpBF,QAAAA,QAAQ,EAAE,CAACA,QADS;AAEpBG,QAAAA,SAAS,EAAE,CAACF,QAFQ,CAEC;;AAFD,OAAtB;AAIA,UAAIG,QAAQ,GAAG,KAAf;AACA,YAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC/DU,QAAAA,MAAM,EAAE,MADuD;AAE/DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,aAAf,CAFyD;AAG/DO,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHsD,OAArC,CAA5B;;AAQA,UAAI,CAACf,QAAQ,CAACgB,EAAd,EAAkB;AAChBN,QAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,YAAMR,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AAEA,UAAIO,QAAJ,EAAc;AACZ,cAAM,IAAIO,KAAJ,CAAUf,YAAY,CAACgB,OAAvB,CAAN;AACD;;AAEDtB,MAAAA,oBAAoB,CAACuB,eAAe,IAAI;AACtC,eAAOA,eAAe,CAACC,MAAhB,CAAuB,EAC5B,GAAGZ,aADyB;AAE5Ba,UAAAA,EAAE,EAAEnB,YAAY,CAACoB,UAAb,CAAwBD;AAFA,SAAvB,CAAP;AAID,OALmB,CAApB;AAMD,KA9BD,CA8BE,OAAOE,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAK,CAACL,OAAN,IAAiB,uBAAlB,CAAL;AACD;AACF,GAlCD;;AAoCA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,eAAe,EAAEb,oBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGR,SAAS,iBAAI;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFhB,EAGG,CAACA,SAAD,iBAAc,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEF,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHjB,CAFF,CADF;AAUD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\n\n\nfunction App() {\n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n\n      const responseData = await response.json();\n\n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchProducts();\n  }, []);\n\n  const addCoordenateHandler = async (latitude, longitud) => {\n    try {\n      const newCoordenate = {\n        latitude: +latitude,\n        longitude: +longitud // \"+\" to convert string to number\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({\n          ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Header />\n      <main>\n        <NewProduct onAddCoordenate={addCoordenateHandler} />\n        {isLoading && <p className=\"loader\">Loading...</p>}\n        {!isLoading && <ProductList items={loadedCoordenates} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}