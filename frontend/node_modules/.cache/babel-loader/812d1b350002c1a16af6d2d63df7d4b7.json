{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carod\\\\Documents\\\\React\\\\weatherapplication\\\\weatherapplication\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\n\nfunction App() {\n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const componentDidMount = () => {\n    //console.log(NewTarget.inputs);\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=-28.46&longitude=-65.80&hourly=temperature_2m`;\n    fetch(url).then(response => response.json()).then(response => {\n      this.setState({\n        'info': response,\n        'temp': response.hourly.temperature_2m\n      });\n    });\n    const {\n      info\n    } = this.state;\n    const temp = this.state.temp;\n    const coodenates = this.state.coordinates;\n    var ShowsInfo = Object.keys({\n      info\n    }).map((keyName, i) => /*#__PURE__*/React.createElement(\"ol\", {\n      className: \"clima\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }, \"key: \", i, \" , Latitude: \", info.latitude, \", Longitude: \", info.longitude, \", elevation: \", info.elevation, \", generation time :\", info.generationtime_ms, \", utc: \", info.utc_offset_seconds, \",\")));\n    var tempItems = temp.map(number => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, number));\n  };\n\n  useEffect(() => {\n    const fetchCoordenates = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n      const responseData = await response.json();\n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchCoordenates();\n  }, []);\n\n  const addCoordenateHandler = async (lat, lon) => {\n    try {\n      const newCoordenate = {\n        latitude: lat,\n        longitude: lon // \"+\" to convert string to number\n\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({ ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  const {\n    info\n  } = this.state;\n  const temp = this.state.temp;\n  const coodenates = this.state.coordinates;\n  var ShowsInfo = Object.keys({\n    info\n  }).map((keyName, i) => /*#__PURE__*/React.createElement(\"ol\", {\n    className: \"clima\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"key: \", i, \" , Latitude: \", info.latitude, \", Longitude: \", info.longitude, \", elevation: \", info.elevation, \", generation time :\", info.generationtime_ms, \", utc: \", info.utc_offset_seconds, \",\")));\n  var tempItems = temp.map(number => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, number));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewProduct, {\n    onAddCoordenate: addCoordenateHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && /*#__PURE__*/React.createElement(ProductList, {\n    items: loadedCoordenates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 24\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/carod/Documents/React/weatherapplication/weatherapplication/frontend/src/App.js"],"names":["React","useState","useEffect","Header","NewProduct","ProductList","App","loadedCoordenates","setLoadedCoordenates","isLoading","setIsLoading","componentDidMount","url","fetch","then","response","json","setState","hourly","temperature_2m","info","state","temp","coodenates","coordinates","ShowsInfo","Object","keys","map","keyName","i","latitude","longitude","elevation","generationtime_ms","utc_offset_seconds","tempItems","number","fetchCoordenates","responseData","coordenates","addCoordenateHandler","lat","lon","newCoordenate","hasError","method","body","JSON","stringify","headers","ok","Error","message","prevCoordenates","concat","id","coordenate","error","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\n\n\nfunction App() {\n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n const componentDidMount= () => {\n   \n  //console.log(NewTarget.inputs);\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=-28.46&longitude=-65.80&hourly=temperature_2m`;\n       fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        this.setState({ 'info': response, 'temp': response.hourly.temperature_2m });\n      })\n\n      const { info } = this.state;\n      const temp = this.state.temp;\n      const coodenates = this.state.coordinates;\n      var ShowsInfo = Object.keys({ info }).map((keyName, i) => (\n        <ol className=\"clima\" key={i}>\n          <span>\n          key: {i} ,\n          Latitude: {info.latitude},\n          Longitude: {info.longitude}, \n          elevation: {info.elevation},\n          generation time :{info.generationtime_ms}, \n          utc: {info.utc_offset_seconds},\n            </span>\n        </ol>\n  \n      ))\n      var tempItems = temp.map((number) =>\n        <li>{number}</li>\n      );\n      \n  \n\n\n\n\n    }\n  useEffect(() => {\n    const fetchCoordenates= async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n\n      const responseData = await response.json();\n\n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchCoordenates();\n  }, []);\n\n  const addCoordenateHandler = async (lat, lon) => {\n    try {\n      const newCoordenate = {\n        latitude: lat,\n        longitude: lon // \"+\" to convert string to number\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({\n          ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n\n  \n  const { info } = this.state;\n  const temp = this.state.temp;\n  const coodenates = this.state.coordinates;\n  var ShowsInfo = Object.keys({ info }).map((keyName, i) => (\n    <ol className=\"clima\" key={i}>\n      <span>\n      key: {i} ,\n      Latitude: {info.latitude},\n      Longitude: {info.longitude}, \n      elevation: {info.elevation},\n      generation time :{info.generationtime_ms}, \n      utc: {info.utc_offset_seconds},\n        </span>\n    </ol>\n\n  ))\n  var tempItems = temp.map((number) =>\n    <li>{number}</li>\n  );\n  \n\n  \n\n  return (\n    <React.Fragment>\n      <Header />\n      <main>\n        <NewProduct onAddCoordenate={addCoordenateHandler} />\n        {isLoading && <p className=\"loader\">Loading...</p>}\n        {!isLoading && <ProductList items={loadedCoordenates} />}\n \n\n    </main>\n    </React.Fragment>\n\n\n  );\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}