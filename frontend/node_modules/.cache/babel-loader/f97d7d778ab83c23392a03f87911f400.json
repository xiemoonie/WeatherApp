{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carod\\\\Documents\\\\React\\\\weatherapplication\\\\weatherapplication\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\n\nfunction App() {\n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchCoordenates = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n      const responseData = await response.json();\n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchCoordenates();\n  }, []);\n\n  const addCoordenateHandler = async (lat, lon) => {\n    try {\n      const newCoordenate = {\n        latitude: lat,\n        longitude: lon // \"+\" to convert string to number\n\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      const fetchPost = async () => {\n        console.log('hola', response.latitude);\n        const resp = await fetch(\"https://api.open-meteo.com/v1/forecast?latitude=`+`${lat}`+`&longitude=`+`${lon}\");\n        const dat = await resp.json();\n        console.log(dat);\n        setPosts(dat);\n      };\n\n      useEffect(() => {\n        fetchPost();\n      }, []);\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({ ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewProduct, {\n    onAddCoordenate: addCoordenateHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), \",\", !isLoading && /*#__PURE__*/React.createElement(ProductList, {\n    items: loadedCoordenates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 24\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    onClick: fetchPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \" GetInfo \"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \" Latitude: \", posts.latitude, \", Longitude: \", posts.longitude, \", elevation: \", posts.elevation, \", generation time :\", posts.generationtime_ms, \", utc: \", posts.utc_offset_seconds)));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/carod/Documents/React/weatherapplication/weatherapplication/frontend/src/App.js"],"names":["React","useState","useEffect","Header","NewProduct","ProductList","App","loadedCoordenates","setLoadedCoordenates","isLoading","setIsLoading","posts","setPosts","fetchCoordenates","response","fetch","responseData","json","coordenates","addCoordenateHandler","lat","lon","newCoordenate","latitude","longitude","hasError","method","body","JSON","stringify","headers","ok","fetchPost","console","log","resp","dat","Error","message","prevCoordenates","concat","id","coordenate","error","alert","elevation","generationtime_ms","utc_offset_seconds"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\nimport Header from './components/Header/Header';\nimport NewProduct from './components/Products/NewProduct';\nimport ProductList from './components/Products/ProductList';\n\n\n\nfunction App() {\n  \n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n  \n  useEffect(() => {\n    const fetchCoordenates= async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n\n      const responseData = await response.json();\n\n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchCoordenates();\n  }, []);\n\n  const addCoordenateHandler = async (lat, lon) => {\n    try {\n      const newCoordenate = {\n        latitude: lat,\n        longitude: lon // \"+\" to convert string to number\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      \n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n     \n      const responseData = await response.json();\n\n      const fetchPost = async () => {\n      \n        console.log('hola', response.latitude);\n        const resp = await fetch(\n         \"https://api.open-meteo.com/v1/forecast?latitude=`+`${lat}`+`&longitude=`+`${lon}\"\n       );\n       const dat = await resp.json();\n       console.log(dat);\n       setPosts(dat);\n       };\n    \n       useEffect(() => {\n         fetchPost()\n       }, []);\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({\n          ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  }\n  \n  \n\n\n  return (\n    \n    <React.Fragment>\n      <Header />\n      <main>\n        \n        <NewProduct onAddCoordenate={addCoordenateHandler}/>\n        {isLoading && <p className=\"loader\">Loading...</p>},\n        {!isLoading && <ProductList items={loadedCoordenates} />}\n        \n        <p onClick={fetchPost}> GetInfo </p>\n        <li> Latitude: {posts.latitude},\n        Longitude: {posts.longitude}, \n        elevation: {posts.elevation},\n        generation time :{posts.generationtime_ms}, \n        utc: {posts.utc_offset_seconds}\n         </li>\n\n    </main>\n    </React.Fragment>\n  );\n\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}