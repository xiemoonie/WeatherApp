{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carod\\\\Documents\\\\React\\\\weatherapplication\\\\weatherapplication\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewCoordenate from './components/Items/NewCoordenate';\nimport List from './components/Items/List';\n\nfunction App() {\n  global.lat = 0;\n  global.lon = 0;\n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [temp, tempItems] = useState([]);\n  useEffect(() => {\n    const fetchCoordenates = async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n      const responseData = await response.json();\n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchCoordenates();\n  }, []);\n\n  const addCoordenateHandler = async (lat, lon) => {\n    try {\n      const newCoordenate = {\n        latitude: lat,\n        longitude: lon // \"+\" to convert string to number\n\n      };\n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        hasError = true;\n      }\n\n      const responseData = await response.json();\n\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n\n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({ ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!! :c');\n    }\n  };\n\n  const fetchPost = async () => {\n    const response = await fetch('http://localhost:5000/coordenates');\n    var responseData = await response.json();\n    const rd = responseData.coordenates;\n    var num = rd.length - 1;\n    var lat = rd[num].latitude;\n    var lon = rd[num].longitude;\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=` + `${lat}` + `&longitude=` + `${lon}`;\n    const resp = await fetch(url);\n    const dat = await resp.json();\n    console.log(dat);\n    setPosts(dat);\n    var tempItems = dat.hourly.time.map(number => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 4\n      }\n    }, number));\n  };\n\n  useEffect(() => {\n    fetchPost();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewCoordenate, {\n    onAddCoordenate: addCoordenateHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), \",\", !isLoading && /*#__PURE__*/React.createElement(List, {\n    items: loadedCoordenates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 24\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchPost,\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \" GetInfo \"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, \" Latitude: \", posts.latitude, \", Longitude: \", posts.longitude, \", elevation: \", posts.elevation, \", generation time :\", posts.generationtime_ms, \", utc: \", posts.utc_offset_seconds)));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/carod/Documents/React/weatherapplication/weatherapplication/frontend/src/App.js"],"names":["React","useState","useEffect","Header","NewCoordenate","List","App","global","lat","lon","loadedCoordenates","setLoadedCoordenates","isLoading","setIsLoading","posts","setPosts","temp","tempItems","fetchCoordenates","response","fetch","responseData","json","coordenates","addCoordenateHandler","newCoordenate","latitude","longitude","hasError","method","body","JSON","stringify","headers","ok","Error","message","prevCoordenates","concat","id","coordenate","error","alert","fetchPost","rd","num","length","url","resp","dat","console","log","hourly","time","map","number","elevation","generationtime_ms","utc_offset_seconds"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport NewCoordenate from './components/Items/NewCoordenate';\nimport List from './components/Items/List';\n\nfunction App() {\n  global.lat = 0;\n  global.lon = 0;\n  const [loadedCoordenates, setLoadedCoordenates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [temp, tempItems] = useState([]);\n  \n  \n  useEffect(() => {\n    const fetchCoordenates= async () => {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/coordenates');\n\n      const responseData = await response.json();\n \n      setLoadedCoordenates(responseData.coordenates);\n      setIsLoading(false);\n    };\n\n    fetchCoordenates();\n  }, []);\n\n  const addCoordenateHandler = async (lat, lon) => {\n    \n    try {\n      const newCoordenate = {\n        latitude: lat,\n        longitude: lon // \"+\" to convert string to number\n      };\n      \n      let hasError = false;\n      const response = await fetch('http://localhost:5000/coordenate', {\n        method: 'POST',\n        body: JSON.stringify(newCoordenate),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    \n      if (!response.ok) {\n        hasError = true;\n      }\n     \n      const responseData = await response.json();\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n    \n      setLoadedCoordenates(prevCoordenates => {\n        return prevCoordenates.concat({\n          ...newCoordenate,\n          id: responseData.coordenate.id\n        });\n      });\n    } catch (error) {\n      alert(error.message || 'Something went wrong!! :c');\n    }\n \n  }\n \n  const fetchPost = async () => {\n    \n      const response = await fetch('http://localhost:5000/coordenates');\n\n      var responseData = await response.json();\n      const rd = responseData.coordenates;\n      var num = rd.length -1;\n      var lat = rd[num].latitude;\n      var lon = rd[num].longitude;\n    \n      const url = `https://api.open-meteo.com/v1/forecast?latitude=`+`${lat}`+`&longitude=`+`${lon}`;\n\n   const resp = await fetch(url);\n   const dat = await resp.json();\n   \n\n   console.log(dat);\n   setPosts(dat);\n\n\n   var tempItems = dat.hourly.time.map((number) =>\n   <li>{number}</li>\n );\n\n   };\n\n   useEffect(() => {\n     fetchPost()\n   }, []);\n\n  \n\n   \n  return (\n    \n    <React.Fragment>\n      <Header />\n      <main>\n        \n        <NewCoordenate onAddCoordenate={addCoordenateHandler}/>\n        {isLoading && <p className=\"loader\">Loading...</p>},\n        {!isLoading && <List items={loadedCoordenates} />}\n        <button onClick={fetchPost} className=\"button\"> GetInfo </button>\n       \n        <li> Latitude: {posts.latitude},\n        Longitude: {posts.longitude}, \n        elevation: {posts.elevation},\n        generation time :{posts.generationtime_ms}, \n        utc: {posts.utc_offset_seconds}\n        \n         </li>\n\n\n      \n        \n\n    </main>\n    </React.Fragment>\n  );\n\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}